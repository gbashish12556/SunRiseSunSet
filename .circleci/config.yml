version: 2

# Each job represents a phase in the Build-Test-Deploy process
jobs:

  build:
    # This is the directory into which our code will be checked out, and this path will be used as the default working directory for the rest of the job
    working_directory: ~/code

    # Container images
    docker:
      - image: circleci/android:api-27-alpha
    
    environment:
      JVM_OPTS: -Xmx3200m

    branches:
      only:
        - master
        - develop
        - feature/2018-12-11-circleci-integration

    steps:

      # We start with checkout so we can operate on the codebase.
      - checkout

      # Pull down the cache, if present
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      #- run:
      #   name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
      #   command: sudo chmod +x ./gradlew
      
      # Pull down the projectâ€™s dependencies
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      
      # Store the dependencies in order to speed things up for next time
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      
      # Run the unit tests, and run the built in linting tools to check your code for style issues
      - run:
          name: Run Tests
          command: ./gradlew lint test

      - run:
          name: Build debug APK and release APK
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ];
            then
              ./gradlew :app:assembleRelease
            fi

            if [ "$CIRCLE_BRANCH" == "feature/2018-12-11-circleci-integration" ];
            then
              ./gradlew :app:assembleRelease
            fi

            ./gradlew :app:assembleDebug
            ./gradlew :app:assembleAndroidTest -DtestBuildType=debug

      - store_artifacts:
          path: app/build/reports
          destination: reports

      - store_test_results:
          path: app/build/test-results

      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project truebil-auction-app

      - run:
          name: Test with Firebase Test Lab
          command: |
            buildAPKPath=app/build/outputs/apk/debug/app-debug.apk
            testAPKPath=app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

            sudo gcloud firebase test android run --type instrumentation --app $buildAPKPath --test $testAPKPath

      - run:
          name: Install gsutil dependency and copy test results data
          command: |
            sudo pip install -U crcmod
            mkdir firebase
            sudo gsutil -m cp -r -U `sudo gsutil ls gs://test-lab-w38qkw1sw94p2-jmvzrxhj0tynk | tail -1` ~/code/firebase/ | true

      - store_artifacts:
          path: firebase/
          destination: firebase/